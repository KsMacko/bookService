openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0
  description: API documentation for your application
servers:
  - url: http://localhost:8080
    description: book-storage-service
security:
  - bearerAuth: []
paths:
  /auth:
    post:
      summary: Create Auth Token
      description: Creates a new authentication token for the user while signing in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user
                password:
                  type: string
                  example: pass
      responses:
        '200':
          description: Token created successfully
        '401':
          description: "Unauthorized: User not found"
      security:
        - bearerAuth:

  /registration:
    post:
      summary: Register User
      description: Registers new user and creates token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: new_user
                password:
                  type: string
                  example: new_pass
                confirmPassword:
                  type: string
                  example: confirm_pass
      responses:
        '200':
          description: User registered successfully
        '400':
          description: "Bad request: User already exists/ Passwords don't match"
      security:
        - bearerAuth:

  /book/find_all:
    get:
      summary: Get all books
      description: Get all books' data
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /book/search_by_id:
    get:
      summary: Search Book by ID
      description: Searches for a book by its ID.
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /book/search_by_isbn:
    get:
      summary: Search Book by ISBN
      description: Searches for a book by its ISBN.
      parameters:
        - name: isbn
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /book/show_free:
    get:
      summary: Show Free Books
      description: Displays a list of available books.
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /book/delete/{id}:
    delete:
      summary: Delete Book
      description: Deletes a book by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully deleted the book
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /book/save:
    post:
      summary: Save Book
      description: Saves a new book to the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookDto'
      responses:
        '200':
          description: Book saved successfully
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

  /book/tracker/update:
    put:
      summary: Update Tracker
      description: Updates the status of a book tracker.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookTracker'
      responses:
        '200':
          description: Tracker updated successfully
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Status:
      type: string
      enum:
        - AVAILABLE
        - BORROWED
        - OVERDUE
        - RENEWED
    BookDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        isbn:
          type: string
        name:
          type: string
        genre:
          type: string
        description:
          type: string
        author:
          type: string
    BookTracker:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        bookStatus:
          $ref: '#/components/schemas/Status'
        borrowDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
        deleted:
          type: boolean
    BookDetailsDto:
      type: object
      properties:
        bookDto:
          $ref: '#/components/schemas/BookDto'
        bookTracker:
          type: array
          items:
            $ref: '#/components/schemas/BookTracker'

